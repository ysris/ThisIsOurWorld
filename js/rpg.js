this.thrower = (e) => { console.error("L'opération a échoué avec le message : " + e); }
let tileWidth = 32;

let layer = {
	tileSetSrc: "tilesets/v1.png",
	map: [
		[2, 2, 2, 3, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 3, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 3, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 85, 86, 86, 86, 86, 86, 87, 88, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 93, 94, 94, 94, 94, 94, 95, 96, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 101, 102, 102, 102, 102, 102, 103, 104, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 129, 130, 131, 132, 133, 134, 135, 136, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 137, 138, 139, 140, 141, 142, 143, 144, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 33, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 3, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 3, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 3, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 3, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 33, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 3, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		[2, 2, 2, 2, 2, 2, 41, 46, 47, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
	]
};

/** Constructor */
window.onload = () => {
	/*reject("Réussite"); resolve("Réussite");*/
	new Promise((resolve, reject) => {
		this.defineCanvas();
		resolve(true);
	}).then(() => {
		this.drawMap();
	}, this.thrower).then(() => {
		let tile = new Image();
		let self = this;
		tile.addEventListener('load', () => {

			self.context.drawImage(
				tile,
				500,
				500
			);
		}, false);
		tile.src = "btc.png";
	}, this.thrower);
}

/** Define the display canvas */
this.defineCanvas = () => {
	let canvas = document.getElementById('canvas');
	canvas.width = tileWidth * layer.map[0].length;
	canvas.height = tileWidth * layer.map.length;
	this.context = canvas.getContext('2d');
};

/** Draw the game map */
this.drawMap = () => {
	for (let y = 0; y < layer.map.length; y++)
		for (let x = 0; x < layer.map[y].length; x++)
			this.drawTile(layer, layer.map[y][x], x, y);
};

/**Draw a tile on the map */
this.drawTile = (curLayer, numero, destX, destY) => {
	let tile = new Image();
	let self = this;
	tile.addEventListener('load', () => {
		let largeur = tile.width / 32;
		let sourceX = numero % largeur;
		if (sourceX == 0) sourceX = largeur;
		let sourceY = Math.ceil(numero / largeur);

		self.context.drawImage(
			tile,
			(sourceX - 1) * tileWidth,
			(sourceY - 1) * tileWidth,
			tileWidth,
			tileWidth,
			destX * tileWidth,
			destY * tileWidth,
			tileWidth,
			tileWidth
		);
	});
	tile.src = curLayer.tileSetSrc;
}